// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64_32-apple-watchos8.5 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WatchMotionCaptureSDK
import CoreBluetooth
import Foundation
import Security
import Swift
import UIKit
@_exported import WatchMotionCaptureSDK
import _Concurrency
import simd
public enum SegmentName : Swift.String, Swift.CaseIterable {
  case Head, Torso, Pelvis, LeftUpperArm, LeftLowerArm, LeftUpperLeg, LeftLowerLeg, RightUpperArm, RightLowerArm, RightUpperLeg, RightLowerLeg
  public init?(rawValue: Swift.String)
  public typealias AllCases = [WatchMotionCaptureSDK.SegmentName]
  public typealias RawValue = Swift.String
  public static var allCases: [WatchMotionCaptureSDK.SegmentName] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum UpdateRate : Swift.UInt8 {
  case Low, Middle, High
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public protocol MotionCaptureDelegate : AnyObject {
  func ready()
  func replayStopped()
  func sensorConnected(_ sensor: WatchMotionCaptureSDK.Sensor)
  func sensorDisconnected(_ sensor: WatchMotionCaptureSDK.Sensor)
  func sensorButtonPressed(_ sensor: WatchMotionCaptureSDK.Sensor)
  func updatedBatteryLevel(_ sensor: WatchMotionCaptureSDK.Sensor)
  func connectionAlert(sensor: WatchMotionCaptureSDK.Sensor, dataRate: Swift.Double)
  func updatedOrientations(timestamp: Foundation.TimeInterval, pose: WatchMotionCaptureSDK.Pose)
  func recordingReady(csvString: Swift.String, duration: Foundation.TimeInterval)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MotionCapture : WatchMotionCaptureSDK.FunctionalComponent {
  public static let shared: WatchMotionCaptureSDK.MotionCapture
  public func configure(delegate: WatchMotionCaptureSDK.MotionCaptureDelegate, license: WatchMotionCaptureSDK.License? = nil)
  public func setSegments(_ segmentNames: [WatchMotionCaptureSDK.SegmentName])
  public func assignSegment(sensor: WatchMotionCaptureSDK.Sensor, segmentName: WatchMotionCaptureSDK.SegmentName)
  public func unassignSegment(segmentName: WatchMotionCaptureSDK.SegmentName)
  public func calibrate()
  public func resetHeading(resetAll: Swift.Bool = false)
  public func setUpdateRate(newUpdateRate: WatchMotionCaptureSDK.UpdateRate)
  public func disconnectSensor(sensor: WatchMotionCaptureSDK.Sensor, isBlocked: Swift.Bool = false)
  public func clearBlockedSensors()
  public func startRecording()
  public func stopRecording()
  public func loadRecording(csvString: Swift.String)
  public func startReplay(timestamp: Foundation.TimeInterval = 0)
  public func stopReplay()
  public func scrubReplay(timestamp: Foundation.TimeInterval)
  public func clearRecording()
  public func trimRecording(beginTime: Foundation.TimeInterval, endTime: Foundation.TimeInterval)
  @objc deinit
}
public class Pose {
  public var segments: [(name: Swift.String, orientation: simd.simd_quatd)]
  public var joints: [(name: Swift.String, orientation: simd.simd_quatd, position: simd.simd_double3)]
  public init()
  @objc deinit
}
public class License {
  public init(userName: Swift.String, licenseKey: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FunctionalComponent {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class Sensor : ObjectiveC.NSObject, CoreBluetooth.CBPeripheralDelegate {
  public var segmentName: Swift.String?
  public var batteryLevel: Swift.UInt8
  public var idString: Swift.String
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc deinit
}
extension WatchMotionCaptureSDK.SegmentName : Swift.Equatable {}
extension WatchMotionCaptureSDK.SegmentName : Swift.Hashable {}
extension WatchMotionCaptureSDK.SegmentName : Swift.RawRepresentable {}
extension WatchMotionCaptureSDK.UpdateRate : Swift.Equatable {}
extension WatchMotionCaptureSDK.UpdateRate : Swift.Hashable {}
extension WatchMotionCaptureSDK.UpdateRate : Swift.RawRepresentable {}
